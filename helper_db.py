# helper_db.py
import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import text

async def init_db_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î"""
    DB_USER = "zapis_user"
    DB_PASSWORD = "zapis_pass" 
    DB_HOST = "postgres"
    DB_PORT = "5432"
    DB_NAME = "zapis"
    
    DATABASE_URL = f"postgresql+asyncpg://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
    
    try:
        print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫: {DB_HOST}:{DB_PORT}/{DB_NAME}")
        
        engine = create_async_engine(DATABASE_URL, echo=True)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        async with engine.connect() as conn:
            result = await conn.execute(text("SELECT 1"))
            test = result.scalar()
            print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: SELECT 1 = {test}")
            
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        async with engine.begin() as conn:
            print("üóÉÔ∏è –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
            from db.models import Base
            await conn.run_sync(Base.metadata.create_all)
        
        print("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")
        await engine.dispose()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î...")
    success = await init_db_async()
    
    if success:
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞!")
    else:
        print("\nüí• –û—à–∏–±–∫–∞!")

if __name__ == "__main__":
    asyncio.run(main())