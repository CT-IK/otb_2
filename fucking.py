# seed_data_async.py
import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker

async def seed_sample_data_async():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –±–∞–∑—É"""
    DB_USER = "zapis_user"
    DB_PASSWORD = "zapis_pass"
    DB_HOST = "postgres" 
    DB_PORT = "5432"
    DB_NAME = "zapis"
    
    DATABASE_URL = f"postgresql+asyncpg://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"
    
    try:
        print(f"üîó –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ: {DB_HOST}:{DB_PORT}/{DB_NAME}")
        
        engine = create_async_engine(DATABASE_URL)
        async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
        
        from db.models import Faculty, User, Candidate, FacultyTimeDelta
        
        print("üìä –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        async with async_session() as session:
            # 1. –°–æ–∑–¥–∞–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—ã –ë–ï–ó admin_id
            faculties = [
                Faculty(name="–§–∞–∫—É–ª—å—Ç–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω—ã—Ö –Ω–∞—É–∫", google_sheet_url="https://docs.google.com/spreadsheets/..."),
                Faculty(name="–§–∞–∫—É–ª—å—Ç–µ—Ç —ç–∫–æ–Ω–æ–º–∏–∫–∏", google_sheet_url="https://docs.google.com/spreadsheets/..."),
                Faculty(name="–§–∞–∫—É–ª—å—Ç–µ—Ç –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏", google_sheet_url="https://docs.google.com/spreadsheets/..."),
            ]
            
            session.add_all(faculties)
            await session.commit()
            print("‚úÖ –§–∞–∫—É–ª—å—Ç–µ—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID
            for faculty in faculties:
                await session.refresh(faculty)
            
            # 2. –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin = User(
                first_name="–ê–¥–º–∏–Ω",
                last_name="–°–∏—Å—Ç–µ–º—ã", 
                tg_id="admin123",
                is_admin_faculty=True,
                faculty_id=faculties[0].id
            )
            session.add(admin)
            await session.commit()
            await session.refresh(admin)
            print("‚úÖ –ê–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω")
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–∫—É–ª—å—Ç–µ—Ç —Å admin_id
            faculties[0].admin_id = admin.id
            await session.commit()
            print("‚úÖ –°–≤—è–∑—å —Ñ–∞–∫—É–ª—å—Ç–µ—Ç-–∞–¥–º–∏–Ω —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
            
            # 4. –°–æ–∑–¥–∞–µ–º –¥–µ–ª—å—Ç–∞-–≤—Ä–µ–º—è –¥–ª—è —Ñ–∞–∫—É–ª—å—Ç–µ—Ç–æ–≤
            for faculty in faculties:
                time_delta = FacultyTimeDelta(
                    faculty_id=faculty.id,
                    hours_before_interview=4
                )
                session.add(time_delta)
            
            await session.commit()
            print("‚úÖ –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–µ–ª—å—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
            
            # 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            candidates = [
                Candidate(
                    first_name="–ò–≤–∞–Ω",
                    last_name="–ü–µ—Ç—Ä–æ–≤", 
                    vk_id="vk12345",
                    tg_id="tg12345",
                    faculty_id=faculties[0].id
                ),
                Candidate(
                    first_name="–ú–∞—Ä–∏—è",
                    last_name="–°–∏–¥–æ—Ä–æ–≤–∞",
                    vk_id="vk67890", 
                    tg_id="tg67890",
                    faculty_id=faculties[1].id
                ),
            ]
            
            session.add_all(candidates)
            await session.commit()
            print("‚úÖ –ö–∞–Ω–¥–∏–¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω—ã")
            
            # 6. –°–æ–∑–¥–∞–µ–º –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            users = [
                User(
                    first_name="–ê–ª–µ–∫—Å–µ–π",
                    last_name="–°–æ–±–µ—Å–µ–¥–æ–≤–∞—Ç–µ–ª—å",
                    tg_id="sobes1",
                    is_sobeser=True,
                    faculty_id=faculties[0].id
                ),
                User(
                    first_name="–ï–ª–µ–Ω–∞",
                    last_name="–ò–Ω—Ç–µ—Ä–≤—å—é–µ—Ä",
                    tg_id="sobes2", 
                    is_sobeser=True,
                    faculty_id=faculties[1].id
                ),
            ]
            
            session.add_all(users)
            await session.commit()
            print("‚úÖ –°–æ–±–µ—Å–µ–¥—É—é—â–∏–µ —Å–æ–∑–¥–∞–Ω—ã")
            
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
            print("\nüìã –î–æ–±–∞–≤–ª–µ–Ω–æ:")
            print(f"   - –§–∞–∫—É–ª—å—Ç–µ—Ç—ã: {len(faculties)}")
            print(f"   - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: 1")
            print(f"   - –ö–∞–Ω–¥–∏–¥–∞—Ç—ã: {len(candidates)}")
            print(f"   - –°–æ–±–µ—Å–µ–¥—É—é—â–∏–µ: {len(users)}")
        
        await engine.dispose()
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

async def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    if await seed_sample_data_async():
        print("\nüéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!")
    else:
        print("\nüí• –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö!")

if __name__ == "__main__":
    asyncio.run(main())